//create a video element for our own video 
//const { Socket } = require("socket.io");
const socket=io('/'); //import socket io in this file
const videoGrid = document.getElementById('video-grid');

const myVideo = document.createElement('video');
myVideo.muted = true;

const myPeer = new Peer(undefined, {
    path: '/peerjs',
    host: '/',
    port: '443'
  });

let myVideoStream //globla variable
navigator.mediaDevices.getUserMedia({  //for accessing devices's camera and audio
    video: true,  
    audio: true
}).then(stream =>{
    myVideoStream = stream;
    addVideoStream(myVideo, stream);  //helps in rendering our video on browser with the help of HTML

    myPeer.on('call', call=>{                            //all this is about anserwing call generated by user to host
        call.answer(stream)
        const video = document.createElement('video')
        call.on('stream', userVideoStream=>{
            addVideoStream(video, userVideoStream)
        })
    })

    //with the room id from room.ejs file , we'll join room
    socket.on('user-connected',userId =>{
        connectToNewUser(userId,stream);
    })
    
} )

myPeer.on('open',id =>{    //listen on to peer connection
    socket.emit('join-room',ROOM_ID, id);
})
    



function connectToNewUser (userId, stream){
     const call = myPeer.call(userId, stream)                        // with getting to know that a new user is joined, we need to identify the user. 
                                                                     // that's where peer-to-peer comes in which will allow to send the stream of a user to everybody else in the room
                                                                     //or we can also say that it will allow real time communication between two or more browsers. 
     const video = document.createElement('video')
     call.on('stream', userVideoStream =>{
         addVideoStream(video, userVideoStream)
     })                                                                
}



 function addVideoStream (video, stream)  {
    video.srcObject = stream;
    video.addEventListener('loadedmetadata', ()=>{
        video.play();
    })

    videoGrid.append(video);
} 